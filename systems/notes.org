#+TITLE: Systems Notes

* Table of Contents                                       :TOC_2_gh:noexport:
- [[#signal-handling----11242019][Signal Handling -- 11/24/2019]]
  - [[#sending-mixed-signals][Sending Mixed Signals]]
- [[#executive-decisions----11252019][Executive Decisions -- 11/25/2019]]
  - [[#the-exec--family---unistdh][The Exec  family - <unistd.h>]]
  - [[#strsep---stringh][strsep - <string.h>]]
  - [[#terminal-info][Terminal Info]]
- [[#managing-sub-processes----11262019][Managing Sub-Processes -- 11/26/2019]]
  - [[#fork----unistdh][fork -- unistd.h]]
  - [[#wait----syswaith][wait -- <sys/wait.h>]]
- [[#navigating-the-shell----12032019][Navigating The Shell -- 12/03/2019]]
  - [[#commands-that-cant-work-in-sub-processes][Commands that can't work in sub processes]]
  - [[#syntax][Syntax]]
- [[#pipe----12122019][Pipe -- 12/12/2019]]
  - [[#unnamed-pipes][Unnamed Pipes]]
  - [[#named-pipes][Named pipes]]
- [[#shared-memory----12162019][Shared Memory -- 12/16/2019]]
  - [[#5-shared-memory-operations][5 Shared Memory Operations]]
  - [[#sysshmh----shared-memory][<sys/shm.h> -- shared memory]]
  - [[#sysipch][<sys/ipc.h>]]
- [[#semaphores----12172019][Semaphores -- 12/17/2019]]
  - [[#semaphore-operations][Semaphore Operations]]
  - [[#function-overview][Function overview]]
  - [[#example-code][Example Code]]

* Signal Handling -- 11/24/2019
** Sending Mixed Signals
*** Signal handling in c programs <signal.h>
    - sighandler
    - To intercept signals in a c program, you must create a signal 
    handling function.
    - Some signals (like SIGKILL, SIGSTOP) cannot be caught
    #+BEGIN_SRC c
      static void sighandler(int signo)
    #+END_SRC
    - Static values in c exist outside the normal call stack, 
    they can be accessed regardless of the function on top
    - For variables, this also means they retain their values even if
    the function they are declared in has ended.
    - Static variables (variables and functions) can only 
    be accessed from within the file they are declared
    #+BEGIN_SRC c
      static void sighandler(int signo) {
        if(signo == SIGINT) prinf("haha! can't touch this!\n");
        if(signo == SIGSEV) printf("nothing to see here..\n");
      }

      int main() {
        signal(SIGINT, sighandler);
        signal(SIGSEGV, sighandler);
      }
    #+END_SRC
    #+BEGIN_SRC c
      exit(0); exit(1); //Exits program, use exit(1) if error
    #+END_SRC

* Executive Decisions -- 11/25/2019
** The Exec  family - <unistd.h>
   A group of c functions that can be used to run other programs.

*** execl
    #+BEGIN_SRC c
      /**
       ,* Replaces the current process with the new program
       ,* @param path Path of command
       ,* @param command Name of program
       ,* @param arg0 command line args to give to prog (-a, -l). Ends with NULL
       ,*/
      execl(char *path, char *command, char *arg0, arg1 _ NULL);
      execl("/bin/ls", "ls", "-a", "-l", NULL);
    #+END_SRC
*** execlp
    #+BEGIN_SRC c
      /**
       ,* Basically execl, except it will check PATH
       ,*/
      execlp(path, command, arg0, arg1);
      execlp("ls", "ls", "-a", "-l", NULL);
       #+END_SRC
*** execvp
    #+BEGIN_SRC c
      /**
       ,* @param argument_array - Array of strings containing the arguments to command.
       ,* argument_array[0] must be the name of command 
       ,*/
      execvp(path, argument_array);
      char *cmd[4] = {"ls", "-a", "-l", NULL};
      execvp(cmd[0], cmd);
    #+END_SRC
** strsep - <string.h>
*** strsep
    Parse a string with a common delimiter
	#+BEGIN_SRC c
    /**
     ,* Locates the first occurence of any specified delimiters in a string and 
     ,* replaces it with NULL
     ,* @param source - set to string starting at 1 index past new NULL
                       char ** because will modify actual value
           char is "w", char * is pointer to "w", char ** is actual
             thing char points to
     ,* @param delimiters - each char interpreted as a distinct delimiter
     ,* @return beginning of the original string
     ,*/
    strsep(char **source, char *delimiters)
#+END_SRC

*** Example
    Replaces the "-" after woah with NULL
    returns a pointer to the "w" in "woah"
    sets curr to point to the t in "this-is-cool"
#+BEGIN_SRC c
char line[100] = "woah-this-is-cool";
char *curr = line;
char *token;
token = strsep(&curr,"-"); //token = "woah", curr = "this-is-cool"
#+END_SRC

** Terminal Info
#+BEGIN_SRC sh
which ls # prints out the directory ls is located in
# Always prints out the one that's run when you type the script
./hello # Tells the terminal not to search PATH for script
#+END_SRC

* Managing Sub-Processes -- 11/26/2019
** fork -- unistd.h
#+BEGIN_SRC c
  #include <unistd.h>

  /**
   ,* Creates a child subprocess (duplicate of parent -- stack and heap copied)
   ,* @return 0 & child's pid, or -1 (errno) to parent
  ,*/
  fork()

  //example
  #include <stdio.h>
  printf("pre-fork pid: %d", getpid());
  f = fork();
  int status;
  if(f) {
    printf("parent pid: %d, f: %d\n", getpid(), f);
    child = wait(&status)
    printf("wait returned: %d status: %d return value: %d\n", 
           child, status, WEXITSTATUS(status));
    // Will also return the signal it got (11 = segfault)
  } else {
    printf("child pid: %d, parent: %d f: %d\n", getpid(), getppid(), f);
    // if getppid() returns 1, then it is an orphan process -- no parent process
    // 1 is the orphan process that is always running
  }
#+END_SRC
** wait -- <sys/wait.h>

#+BEGIN_SRC c
#include <sys/wait.h>

/**
 * Stops a child process from running until any child has exited
 * @param status - Represented by 4 bytes, base 256
 * @return - Returns pid of child that exited, or -1 (errno) + gathers info about child process (reaping)
 *           IF multiple child processes exit, rand one will be reaped
*/
wait(status)
#+END_SRC
*** Status macros
#+BEGIN_SRC c
MACRO(status)
WIFEEXITED // True if child exited normally
WEXITSTATUS // The return value of the child
WIFSIGNALLED // True if child exited due to a signal
WTERMSIG
#+END_SRC
* Navigating The Shell -- 12/03/2019
** Commands that can't work in sub processes
   cd & exit -- Both are designed to edit the parent process.
   (calling cd on a child process won't change the directory)
** Syntax
   ; means the same thing that it does in java/c
   pipeline taks the input of one thing, and passes it on to the next
* Pipe -- 12/12/2019
A conduit between 2 separate processes on the same computer
Pipes have 2 ends, a read end and a write end
Pipes exist in memory
** Unnamed Pipes
*** pipe - <unistd.h>
#+BEGIN_SRC c
/**
 * Create an unnamed pipe
 * @return 0 if the pipe was created, -1 if not
*/
pipe(int descriptors[2])
#+END_SRC
*** Example Code
#+BEGIN_SRC c
#define READ 0
#define WRITE 1
int fds[2];
pipe(fds);

printf("fds[0]: %d\n", fds[0]);
printf("fds[1]: %d\n", fds[1]);

f = fork();
if(f) {
  char line[100];
  printf("parent: getting info from child...\n");
  read(fds[READ], line, sizeof(line));
  printf("parent: received [%s]\n", line);
} else P
  printf("child: sending info to parent. \n");
  sleep(10);
  write(fds[WRITE], "hello!", 7);
}
#+END_SRC
** Named pipes
- Are FIFOs (works like a queue), but data isn't stored
#+BEGIN_SRC shell
mkfifo
#+END_SRC
- Creats a fifo
- After a connection is established, sends signal to stop other end
  if read/write end is terminated
- Unidirectional

*** mkfifo - <sys/types.h> <sys/stat.h>
#+BEGIN_SRC c
/**
 * c function to create a FIFO
 * Once created, FIFO acts like a regular file -- can use open
 * FIFO will block on open until both ends of pipe have connection
 * @return 0 on success, -1 on failure
*/
mkfifo(char *name, int *permissions)
#+END_SRC

*** Example Code
#+BEGIN_SRC c
int main() {
  int fd;
  char line[100];

  mkfifo("mario", 0644);
  fd = open("mario", 0_RDONLY);
  printf("fifo open!\n");
  while( read(fd, line, sizeof(line))) 
    printf("read: [%s]\n", line);
  return 0;
}
#+END_SRC
* Shared Memory -- 12/16/2019
  A segment of heap memory that can be accessed by multiple processes
  Shared memory is accessed via key (no file table entry)
  Shared memory doesn't get released when a prog exits
  Eg. Named Pipes
  `ipcs -m`

#+BEGIN_SRC c
#include <sys/ipc.h>

#define KEY 24601;
#define SEG_SIZE

int main() {
  int *data;
  int shmd;
  char input[3];

  shmd = shmget(KEY, SEG_SIZE, IPC_CREAT | 0640);
  printf("shmd: %d\n", shmd);

  data = shmat(shmd, 0, 0); //Can treat this like any other part of mem

  if(!(*data))
    printf("No data\n");
  else
    printf("data: %s\n", data);
  printf("Modify segment? (y/n)");
  fgets(data, SEG_SIZE, stdin);
  *strchr(data, '\n') = 0;
  printf("data: %d\n", data);

  shmdt(data); //Removes 

  printf("Would you like to remove the segment? (y/n) ");
  //printf("*data: %d\n", *data); SEGFAULT

  //remove segment from actual memory
  systemctl(shmd, IPC_RMID, 0);
  return 0;
}
#+END_SRC
** 5 Shared Memory Operations
   1. Create the segment (happens once) - [[#shmget][shmget]]
   2. Access the segment (happens once per process) - [[#shmget][shmget]]
   3. Attatch the segment to a variable (once per process) - shmat
   4. Detatch the segment from a variable (once per process) - shmdt
   5. Remove the segment (happens once) - shmctl
** <sys/shm.h> -- shared memory
#+NAME: shmget
#+BEGIN_SRC c
/*
 * Create the segment/accesses segment
 * @param key - identifying value for shared memory
 * @param size - Size of memory allocated (# of bytes)
 * @param shmflags - IPC_CREAT, IPC_EXCL
*/
shmget(key_t key, size_t size, int shmflag);

/*
 * Attatch the segment to a variable
*/
shmat(int shmid, 0, 0);// Unless you know what you're doing, just put 0, 0
#+END_SRC

** <sys/ipc.h>
   IPC_CREAT: Create a new segment
   IPC_EXCL: Used with IPC_CREAT. If seg already exists, call fails
#+BEGIN_SRC sh
ipcs -m #Check table for shared memory segments
ipcrm #Remove ipc
#+END_SRC

* Semaphores -- 12/17/2019
  IPC Construct used to control access to a shared resource
  Semaphore used as a counter (num processes can concurrently access resource)
  If a semaphore has a value of 3, it can have 3 active users (0 if unavail)
  Semaphore operations are "atomic" (won't be multiple processor instructions)
  `ipcs -m`
** Semaphore Operations
   1. Create a semaphore
   2. Set an initial value
   3. Remove a semaphore
   4. Release semaphore when done -- Up(S) / V(S) (atomic)
   5. Attempt to take semaphore (wait until >0) -- Down(S) / P(S) (atomic)
      #+BEGIN_SRC c
       //Pseudocode
       while(S == 0) { block } S--;
      #+END_SRC
** Function overview
   #+BEGIN_SRC c
   /**
    * 
   */
   semdget(int KEY, int num, int flags);
   #+END_SRC
** Example Code
   Creating the semaphore
   #+BEGIN_SRC c
   int main() {
     #define KEY 139234  //Can't be the same as shared memory key
     int semd; int r; int v;
     semd = semget(KEY, 1, IPC_CREAT | IPC_EXCL | 0644);
     //Checks to see if you're trying to create prexisting semaphore
     if(semd == -1) {
       printf("error %d: %s\n", errno, strerror(errno));
       semd = semget(KEY, 1, 0);
       v = semctl(semd, 0, GETVAL, 0); //not atomic, get semaphore val
       printf("semctl returned %d\n", v);
     } else {
       ///Union is like a struct, except all the values are modified together
       ///Will need to recreate the union in header
       ///Find union in `man semctl`
       union semun us;
       us.val = 1;
       r = semctl(semd, 0, SETVAL, us);
       printf("semctl returned: %d\n", r);
     }
   }
   #+END_SRC
   Using the semaphore
   #+BEGIN_SRC c
   int main() {
     int semd; int r; int v;
     semd = semget(KEY, 1, 0);
     struct sembuf sb;
     sb.sem_num = 0; //semaphore location in sem array
     sb.sem_op = -1; //down semaphore

     sb.sem_op = -1;
     semop(semd, &sb, 1);
     printf("got the semaphore!\n");
     sleep(10); //simulate hard work

     sb.sem_op = 1; //up semaphore
     semop(semd, &sb, 1); //detatch semaphore
   }
   #+END_SRC
