{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"matrix/","text":"Matrixes In Graphics Matrixes store significant endpoints of images Each pair of entries = edge [x0 x1 x2 xN] [y0 y1 y2 yN] [z0 z1 z2 zN] P0 P1 P2 P3 Matrix Multiplication The column of the first = the row of the second Set Z to zero for now Make sure that if you're coding in C, make the matrixes doubles Note that this example is basically matrix * itself , if you multiply by a zero matrix, it will erase your entire matrix 0[1 0 0] [x0 x1 xN] 1[0 1 0] * [y0 y1 yN] 2[0 0 1] [z0 z1 zN] Ex. [4 0 0] [x0 x1 xN] [4x0 4x1 4xN] [0 3 0] * [y0 y1 yN] = [3y0 3y1 3yN] [0 0 2] [y0 y1 yN] [2y0 2y1 2yN] Note, the average matrix should look like this: The [1 1 1] needs to be there through the entire matrix, put it there for now, explanation for why will come later [x0 x1 xN] [y0 y1 yN] [z0 z1 zN] [1 1 1]","title":"Matrix"},{"location":"matrix/#matrixes-in-graphics","text":"Matrixes store significant endpoints of images Each pair of entries = edge [x0 x1 x2 xN] [y0 y1 y2 yN] [z0 z1 z2 zN] P0 P1 P2 P3","title":"Matrixes In Graphics"},{"location":"matrix/#matrix-multiplication","text":"The column of the first = the row of the second Set Z to zero for now Make sure that if you're coding in C, make the matrixes doubles Note that this example is basically matrix * itself , if you multiply by a zero matrix, it will erase your entire matrix 0[1 0 0] [x0 x1 xN] 1[0 1 0] * [y0 y1 yN] 2[0 0 1] [z0 z1 zN] Ex. [4 0 0] [x0 x1 xN] [4x0 4x1 4xN] [0 3 0] * [y0 y1 yN] = [3y0 3y1 3yN] [0 0 2] [y0 y1 yN] [2y0 2y1 2yN] Note, the average matrix should look like this: The [1 1 1] needs to be there through the entire matrix, put it there for now, explanation for why will come later [x0 x1 xN] [y0 y1 yN] [z0 z1 zN] [1 1 1]","title":"Matrix Multiplication"},{"location":"parametric/","text":"Parametric Equations -- 3/2/2020 Non Parametric Parametric y = f(x) x = f(t) y = g(t) - Define curves as system of equations in terms of an independent variable - Think of t as a percentage. Think of a shape, and increase t based on how far along you are ## Line (x0, y0) -> (x1, y1) t=1 . / / t=0 / . x = x0 + t(x1 - x0) Circle (Cx, Cy), r x = rcos(2pi * t) + Cx y = rsin(2pi * t) + Cy t= 0 - 1","title":"Parametric"},{"location":"parametric/#parametric-equations-322020","text":"Non Parametric Parametric y = f(x) x = f(t) y = g(t) - Define curves as system of equations in terms of an independent variable - Think of t as a percentage. Think of a shape, and increase t based on how far along you are ## Line (x0, y0) -> (x1, y1) t=1 . / / t=0 / . x = x0 + t(x1 - x0)","title":"Parametric Equations -- 3/2/2020"},{"location":"parametric/#circle","text":"(Cx, Cy), r x = rcos(2pi * t) + Cx y = rsin(2pi * t) + Cy t= 0 - 1","title":"Circle"},{"location":"transformations/","text":"Transformations -- 2/24 Scale, Translate, Rotate Applied as matrix multiplication Scale Scale (x, y, z) --> (ax, by, cz) [a 0 0 0][x] = [ax] [0 b 0 0][y] = [by] [0 0 c 0][z] = [cz] [0 0 0 1][1] = [1] This will also cause the shape to shift as well Translate Transform (x, y, z) --> (x + a, y + b, z + c) [1 0 0 a][x] = [x + a] [0 1 0 a][y] = [y + b] [0 0 1 a][z] = [z + c] [0 0 0 1][1] = [ 1 ] Rotate Rotate z axis (x, y, z) --> (xcost - ysint, xsint + ycost, z) [cost -sint 0 0][x] [sint cost 0 0][y] [ 0 0 1 0][z] [ 0 0 0 1][1] Rotate x axis (x, y, z) --> (x, ycost - zsint, ysint + zcost) [1 0 0 0][x] [1 cost -sint 0][y] [1 sint cost 0][z] [1 0 0 1][1] Rotate y axis (x, y, z) --> (xcost + zsint, y, -xsint + zcost) [-sint 0 cost 0] [ 0 1 0 0] [ cost 0 sint 0] [ 0 0 0 1] Combining Transformations","title":"Transformations"},{"location":"transformations/#transformations-224","text":"Scale, Translate, Rotate Applied as matrix multiplication","title":"Transformations -- 2/24"},{"location":"transformations/#scale","text":"Scale (x, y, z) --> (ax, by, cz) [a 0 0 0][x] = [ax] [0 b 0 0][y] = [by] [0 0 c 0][z] = [cz] [0 0 0 1][1] = [1] This will also cause the shape to shift as well","title":"Scale"},{"location":"transformations/#translate","text":"Transform (x, y, z) --> (x + a, y + b, z + c) [1 0 0 a][x] = [x + a] [0 1 0 a][y] = [y + b] [0 0 1 a][z] = [z + c] [0 0 0 1][1] = [ 1 ]","title":"Translate"},{"location":"transformations/#rotate","text":"Rotate z axis (x, y, z) --> (xcost - ysint, xsint + ycost, z) [cost -sint 0 0][x] [sint cost 0 0][y] [ 0 0 1 0][z] [ 0 0 0 1][1] Rotate x axis (x, y, z) --> (x, ycost - zsint, ysint + zcost) [1 0 0 0][x] [1 cost -sint 0][y] [1 sint cost 0][z] [1 0 0 1][1] Rotate y axis (x, y, z) --> (xcost + zsint, y, -xsint + zcost) [-sint 0 cost 0] [ 0 1 0 0] [ cost 0 sint 0] [ 0 0 0 1]","title":"Rotate"},{"location":"transformations/#combining-transformations","text":"","title":"Combining Transformations"}]}