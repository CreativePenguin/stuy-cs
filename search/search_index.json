{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Making Images Get svg files of things Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#making-images","text":"Get svg files of things","title":"Making Images"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"3dshapes/","text":"3D Shapes Box Rectangular Prism Given Vertex -- (left, top, front) Width (x), Height(y), Depth(z) Defining Points 8 vertices Sphere Rotate a circle around x or y (not z though) Given Center Radius Defining Points Points on circumference x -> rcos(\u03b8) y -> rsin(\u03b8) Torus Dounut Shape","title":"3D Shapes"},{"location":"3dshapes/#3d-shapes","text":"","title":"3D Shapes"},{"location":"3dshapes/#box","text":"Rectangular Prism","title":"Box"},{"location":"3dshapes/#given","text":"Vertex -- (left, top, front) Width (x), Height(y), Depth(z)","title":"Given"},{"location":"3dshapes/#defining-points","text":"8 vertices","title":"Defining Points"},{"location":"3dshapes/#sphere","text":"Rotate a circle around x or y (not z though)","title":"Sphere"},{"location":"3dshapes/#given_1","text":"Center Radius","title":"Given"},{"location":"3dshapes/#defining-points_1","text":"Points on circumference x -> rcos(\u03b8) y -> rsin(\u03b8)","title":"Defining Points"},{"location":"3dshapes/#torus","text":"Dounut Shape","title":"Torus"},{"location":"colordepth/","text":"Peering into the depths of color -- 1/28 Color Depth : The amount of data used to represent a single pixel Size Color Options Description 1 bit 1 color, on off 2 bit 1 color with intensity 3 bit red, green, and blue (8 colors) 4 bit red, green, blue, and intensity 6 bit red, green, blue, with individual intensity 3 byte R G B, each with 256 values Defining Color RGBA : Red, Green, Blue, Alpha (transparency) HSB : Hue, Saturation (how deep color is), Brightness Image File Formats Raster vs Vector Vector formats represent images as a series of drawing instructions. (*.svg -- Scalable Vector Graphics) Raster formats represent images as a grid of pixels (think how a tv updates) Uncompressed vs. compressed (Raster) Uncompressed images contain data for each pixel (BMP, TIFF, RAW) Compressed formats use a compression algorithm to minimize file size Lossless vs Lossy Lossless compression algorithms contain enough info to exatly recreate the original image (PNG -- Portable Network Graphics, GIF -- Graphics Interchage Format) Lossy compression algorithms do not retain all the details of the original image (JPEG -- Joint Photographic Experts Group) PPM (Portable PixMap) : Uncompressed raster format (RGB triplets in ascii or binary) P3 (or P6 if you're writing in binary) 5 5 (pixel len and width of file) 255 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 0 255 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 convert is a useful tool to convert images between formats","title":"Colors"},{"location":"colordepth/#peering-into-the-depths-of-color-128","text":"Color Depth : The amount of data used to represent a single pixel Size Color Options Description 1 bit 1 color, on off 2 bit 1 color with intensity 3 bit red, green, and blue (8 colors) 4 bit red, green, blue, and intensity 6 bit red, green, blue, with individual intensity 3 byte R G B, each with 256 values","title":"Peering into the depths of color -- 1/28"},{"location":"colordepth/#defining-color","text":"RGBA : Red, Green, Blue, Alpha (transparency) HSB : Hue, Saturation (how deep color is), Brightness","title":"Defining Color"},{"location":"colordepth/#image-file-formats","text":"Raster vs Vector Vector formats represent images as a series of drawing instructions. (*.svg -- Scalable Vector Graphics) Raster formats represent images as a grid of pixels (think how a tv updates) Uncompressed vs. compressed (Raster) Uncompressed images contain data for each pixel (BMP, TIFF, RAW) Compressed formats use a compression algorithm to minimize file size Lossless vs Lossy Lossless compression algorithms contain enough info to exatly recreate the original image (PNG -- Portable Network Graphics, GIF -- Graphics Interchage Format) Lossy compression algorithms do not retain all the details of the original image (JPEG -- Joint Photographic Experts Group) PPM (Portable PixMap) : Uncompressed raster format (RGB triplets in ascii or binary) P3 (or P6 if you're writing in binary) 5 5 (pixel len and width of file) 255 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 0 255 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 255 255 0 convert is a useful tool to convert images between formats","title":"Image File Formats"},{"location":"linealgorithm/","text":"Line Algorithm Input: 2 pixel endpoints. Output: Line that connects two inputs Problem: in order for line to be accurate, it would need to be able to draw on the subpixel level, which is impossible Potential Solutions: Test Potential Pixels, iterate through potential pixels Today's task will be to develop a line algorithm that only works in octant I. Thus, we only need to turn on one pixel per x Algorithm is basically: 1. Loop through x0 to x1 2. TEST(x + 1, y) TEST(x + 1, y + 1) 3. Pick best point Formulas y = mx + b =\\> Ax + By + C = 0 A = dy, B = -dx, C = dx / b Variables gotten by simplifying y = mx + b to Ax + By + C f(x, y) = Ax + By + C (x + 1, y + .5) -- Midpoint of our options f(x + 1, y + .5) if 0, MP on line, pick one option if pos, MP is below line, pick(x + 1, y + 1) if neg, MP above line, pick (x + 1, y):: Part 1: x = x0, y = y0 while x \\<= x1 plot(x, y) d0 = f(x + 1, y + 1) d1 = f(x + 1, y) if abs(d0) \\< abs(d1) y = y + 1 x = x + 1 Part 2: plot(x, y) d = f(x + 1, y + .5) if d > 0 y++","title":"Line"},{"location":"linealgorithm/#line-algorithm","text":"Input: 2 pixel endpoints. Output: Line that connects two inputs Problem: in order for line to be accurate, it would need to be able to draw on the subpixel level, which is impossible Potential Solutions: Test Potential Pixels, iterate through potential pixels Today's task will be to develop a line algorithm that only works in octant I. Thus, we only need to turn on one pixel per x Algorithm is basically: 1. Loop through x0 to x1 2. TEST(x + 1, y) TEST(x + 1, y + 1) 3. Pick best point","title":"Line Algorithm"},{"location":"linealgorithm/#formulas","text":"y = mx + b =\\> Ax + By + C = 0 A = dy, B = -dx, C = dx / b Variables gotten by simplifying y = mx + b to Ax + By + C f(x, y) = Ax + By + C (x + 1, y + .5) -- Midpoint of our options f(x + 1, y + .5) if 0, MP on line, pick one option if pos, MP is below line, pick(x + 1, y + 1) if neg, MP above line, pick (x + 1, y):: Part 1: x = x0, y = y0 while x \\<= x1 plot(x, y) d0 = f(x + 1, y + 1) d1 = f(x + 1, y) if abs(d0) \\< abs(d1) y = y + 1 x = x + 1 Part 2: plot(x, y) d = f(x + 1, y + .5) if d > 0 y++","title":"Formulas"},{"location":"matrix/","text":"Matrixes In Graphics Matrixes store significant endpoints of images Each pair of entries = edge [x0 x1 x2 xN] [y0 y1 y2 yN] [z0 z1 z2 zN] P0 P1 P2 P3 Matrix Multiplication The column of the first = the row of the second Set Z to zero for now Make sure that if you're coding in C, make the matrixes doubles Note that this example is basically matrix * itself , if you multiply by a zero matrix, it will erase your entire matrix 0[1 0 0] [x0 x1 xN] 1[0 1 0] * [y0 y1 yN] 2[0 0 1] [z0 z1 zN] Ex. [4 0 0] [x0 x1 xN] [4x0 4x1 4xN] [0 3 0] * [y0 y1 yN] = [3y0 3y1 3yN] [0 0 2] [y0 y1 yN] [2y0 2y1 2yN] Note, the average matrix should look like this: The [1 1 1] needs to be there through the entire matrix, put it there for now, explanation for why will come later [x0 x1 xN] [y0 y1 yN] [z0 z1 zN] [1 1 1]","title":"Matrix"},{"location":"matrix/#matrixes-in-graphics","text":"Matrixes store significant endpoints of images Each pair of entries = edge [x0 x1 x2 xN] [y0 y1 y2 yN] [z0 z1 z2 zN] P0 P1 P2 P3","title":"Matrixes In Graphics"},{"location":"matrix/#matrix-multiplication","text":"The column of the first = the row of the second Set Z to zero for now Make sure that if you're coding in C, make the matrixes doubles Note that this example is basically matrix * itself , if you multiply by a zero matrix, it will erase your entire matrix 0[1 0 0] [x0 x1 xN] 1[0 1 0] * [y0 y1 yN] 2[0 0 1] [z0 z1 zN] Ex. [4 0 0] [x0 x1 xN] [4x0 4x1 4xN] [0 3 0] * [y0 y1 yN] = [3y0 3y1 3yN] [0 0 2] [y0 y1 yN] [2y0 2y1 2yN] Note, the average matrix should look like this: The [1 1 1] needs to be there through the entire matrix, put it there for now, explanation for why will come later [x0 x1 xN] [y0 y1 yN] [z0 z1 zN] [1 1 1]","title":"Matrix Multiplication"},{"location":"parametric/","text":"Parametric Equations -- 3/2/2020 Non Parametric Parametric y = f(x) x = f(t) y = g(t) Define curves as system of equations in terms of an independent variable Think of t as a percentage. Think of a shape, and increase t based on how far along you are Line (x0, y0) -> (x1, y1) t=1 . / / t=0 / . x = x0 + t(x1 - x0) Circle (Cx, Cy), r x = rcos(2pi * t) + Cx y = rsin(2pi * t) + Cy t= 0 - 1","title":"Parametric"},{"location":"parametric/#parametric-equations-322020","text":"Non Parametric Parametric y = f(x) x = f(t) y = g(t) Define curves as system of equations in terms of an independent variable Think of t as a percentage. Think of a shape, and increase t based on how far along you are","title":"Parametric Equations -- 3/2/2020"},{"location":"parametric/#line","text":"(x0, y0) -> (x1, y1) t=1 . / / t=0 / . x = x0 + t(x1 - x0)","title":"Line"},{"location":"parametric/#circle","text":"(Cx, Cy), r x = rcos(2pi * t) + Cx y = rsin(2pi * t) + Cy t= 0 - 1","title":"Circle"},{"location":"splines/","text":"Splines -- 3/3/2020 Curves (cubic) that appeared to be smooth/continuous Circle x = r\u03b8 + cx -> x = rcos(2\u03c0t) + cx y = r\u03b8 + cy -> y = rsin(2\u03c0t) + cy 0 <= \u03b8 <= \u03c0 0 <= T <= 1 Bezier Defined By: 2 Endpoints (P0, P3) && 2 Influence Points(P1, P2) Influence points pull the curve Quadratic curve would only have on influence point Line Pt = (1 - t)P0 + tP1 Quadratric Q0 = (1 - t)Q0 + tQ1 Q0t = (1 - t)P0 + tP1 Q1t = (1 - t)P1 + tP2 Qt = (1 - t)[(1 - t)P0 + tP1] + t[(1 - t)P1 + tP2] Qt = (1 - t) 2 P0 + 2t(1 - t)P1 + t 2 P2 Cubic O = (1 - t)S + tT S = (1 - t) 2 A + 2t(1 - t)B + t 2 C T = (1 - t) 2 B + 2t(1 - t)C + t 2 D O = (1 - t)[(1 - t) 2 A + 2t(1 - t)B + t 2 C] + t[(1 - t) 2 B + 2t(1 - t)C + t 2 D] O = (1 - t) 3 A + 3t(1 - t) 2 B + 3t 2 (1 - t)C + t 3 D (-A + 3B - 3C + D)t 3 + (3A - 6B + 3C)t 2 + (-3A + 3B)t + A Form: at 3 + bt 2 + ct + d Hermite Defined By: 2 endpoints: P0, P1 && Rates of change at each endpoint: R0, R1 Hermite curves are better when you're typing instructions rather than clicking and drawing things f(t) = at 3 + bt 2 + ct + d Points on curve f'(t) = 3at 2 + 2bt + c Rates of change f(0) = d = P0 f(1) = a + b + c + d = P1 f'(0) = C = R0 f'(1) = 3a + 2b + c = R1 [0 0 0 1] * [a] = [ d ] => [P0] [1 1 1 1] * [b] = [a + b + c + d] => [P1] [0 0 1 0] * [c] = [ c ] => [R0] [1 2 1 0] * [d] = [ 3a + 2b + c ] => [R1] [ 2 -2 1 1] * [P0] = [ 2P0 - 2P1 + R0 + R1 ] = a [-3 3 -2 -1] * [P0] = [-3P0 + 3p1 - 2R0 - R1] = b [ 0 0 1 0] * [P0] = [ R0 ] = c [ 1 0 0 0] * [P0] = [ P0 ] = d","title":"Splines"},{"location":"splines/#splines-332020","text":"Curves (cubic) that appeared to be smooth/continuous","title":"Splines -- 3/3/2020"},{"location":"splines/#circle","text":"x = r\u03b8 + cx -> x = rcos(2\u03c0t) + cx y = r\u03b8 + cy -> y = rsin(2\u03c0t) + cy 0 <= \u03b8 <= \u03c0 0 <= T <= 1","title":"Circle"},{"location":"splines/#bezier","text":"Defined By: 2 Endpoints (P0, P3) && 2 Influence Points(P1, P2) Influence points pull the curve Quadratic curve would only have on influence point","title":"Bezier"},{"location":"splines/#line","text":"Pt = (1 - t)P0 + tP1","title":"Line"},{"location":"splines/#quadratric","text":"Q0 = (1 - t)Q0 + tQ1 Q0t = (1 - t)P0 + tP1 Q1t = (1 - t)P1 + tP2 Qt = (1 - t)[(1 - t)P0 + tP1] + t[(1 - t)P1 + tP2] Qt = (1 - t) 2 P0 + 2t(1 - t)P1 + t 2 P2","title":"Quadratric"},{"location":"splines/#cubic","text":"O = (1 - t)S + tT S = (1 - t) 2 A + 2t(1 - t)B + t 2 C T = (1 - t) 2 B + 2t(1 - t)C + t 2 D O = (1 - t)[(1 - t) 2 A + 2t(1 - t)B + t 2 C] + t[(1 - t) 2 B + 2t(1 - t)C + t 2 D] O = (1 - t) 3 A + 3t(1 - t) 2 B + 3t 2 (1 - t)C + t 3 D (-A + 3B - 3C + D)t 3 + (3A - 6B + 3C)t 2 + (-3A + 3B)t + A Form: at 3 + bt 2 + ct + d","title":"Cubic"},{"location":"splines/#hermite","text":"Defined By: 2 endpoints: P0, P1 && Rates of change at each endpoint: R0, R1 Hermite curves are better when you're typing instructions rather than clicking and drawing things f(t) = at 3 + bt 2 + ct + d Points on curve f'(t) = 3at 2 + 2bt + c Rates of change f(0) = d = P0 f(1) = a + b + c + d = P1 f'(0) = C = R0 f'(1) = 3a + 2b + c = R1 [0 0 0 1] * [a] = [ d ] => [P0] [1 1 1 1] * [b] = [a + b + c + d] => [P1] [0 0 1 0] * [c] = [ c ] => [R0] [1 2 1 0] * [d] = [ 3a + 2b + c ] => [R1] [ 2 -2 1 1] * [P0] = [ 2P0 - 2P1 + R0 + R1 ] = a [-3 3 -2 -1] * [P0] = [-3P0 + 3p1 - 2R0 - R1] = b [ 0 0 1 0] * [P0] = [ R0 ] = c [ 1 0 0 0] * [P0] = [ P0 ] = d","title":"Hermite"},{"location":"transformations/","text":"Transformations -- 2/24 Scale, Translate, Rotate Applied as matrix multiplication Scale Scale (x, y, z) --> (ax, by, cz) [a 0 0 0][x] = [ax] [0 b 0 0][y] = [by] [0 0 c 0][z] = [cz] [0 0 0 1][1] = [1] This will also cause the shape to shift as well Translate Transform (x, y, z) --> (x + a, y + b, z + c) [1 0 0 a][x] = [x + a] [0 1 0 a][y] = [y + b] [0 0 1 a][z] = [z + c] [0 0 0 1][1] = [ 1 ] Rotate Rotate z axis (x, y, z) --> (xcost - ysint, xsint + ycost, z) [cost -sint 0 0][x] [sint cost 0 0][y] [ 0 0 1 0][z] [ 0 0 0 1][1] Rotate x axis (x, y, z) --> (x, ycost - zsint, ysint + zcost) [1 0 0 0][x] [1 cost -sint 0][y] [1 sint cost 0][z] [1 0 0 1][1] Rotate y axis (x, y, z) --> (xcost + zsint, y, -xsint + zcost) [-sint 0 cost 0] [ 0 1 0 0] [ cost 0 sint 0] [ 0 0 0 1] Combining Transformations","title":"Transformations"},{"location":"transformations/#transformations-224","text":"Scale, Translate, Rotate Applied as matrix multiplication","title":"Transformations -- 2/24"},{"location":"transformations/#scale","text":"Scale (x, y, z) --> (ax, by, cz) [a 0 0 0][x] = [ax] [0 b 0 0][y] = [by] [0 0 c 0][z] = [cz] [0 0 0 1][1] = [1] This will also cause the shape to shift as well","title":"Scale"},{"location":"transformations/#translate","text":"Transform (x, y, z) --> (x + a, y + b, z + c) [1 0 0 a][x] = [x + a] [0 1 0 a][y] = [y + b] [0 0 1 a][z] = [z + c] [0 0 0 1][1] = [ 1 ]","title":"Translate"},{"location":"transformations/#rotate","text":"Rotate z axis (x, y, z) --> (xcost - ysint, xsint + ycost, z) [cost -sint 0 0][x] [sint cost 0 0][y] [ 0 0 1 0][z] [ 0 0 0 1][1] Rotate x axis (x, y, z) --> (x, ycost - zsint, ysint + zcost) [1 0 0 0][x] [1 cost -sint 0][y] [1 sint cost 0][z] [1 0 0 1][1] Rotate y axis (x, y, z) --> (xcost + zsint, y, -xsint + zcost) [-sint 0 cost 0] [ 0 1 0 0] [ cost 0 sint 0] [ 0 0 0 1]","title":"Rotate"},{"location":"transformations/#combining-transformations","text":"","title":"Combining Transformations"}]}